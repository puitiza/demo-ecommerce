server:
  port: 8082

spring:
  application:
    name: order-service
  profiles:
    active: dev
  config:
    import: optional:configserver:${CONFIG_ENDPOINT:http://localhost:8885}
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ENDPOINT:http://localhost:8080/realms}/demo-ecommerce
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

resilience4j:
  circuitbreaker:
    instances:
      productServiceCircuit:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        registerHealthIndicator: true
        recordExceptions:
          - org.springframework.web.client.RestClientException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
  timelimiter:
    instances:
      productServiceCircuit:
        timeoutDuration: 3s

logging:
  level:
    io.github.resilience4j: INFO
    io.github.resilience4j.circuitbreaker: DEBUG