server:
  port: 8082

spring:
  application:
    name: order-service
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ENDPOINT:http://localhost:8080/realms}/demo-ecommerce
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

eureka:
  client:
    service-url:
      defaultZone: ${DISCOVERY_ENDPOINT:http://localhost:8761/eureka}

management:
  tracing:
    enabled: true
    sampling:
      probability: 1.0   # 100% requests
  otlp:
    tracing:
      endpoint: ${MANAGEMENT_OTLP_TRACING_ENDPOINT:http://localhost:4318/v1/traces}
  endpoints:
    web:
      exposure:
        include: health,info,prometheus # Expose endpoints
  health:
    circuitbreakers:
      enabled: true
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: ${spring.application.name}

resilience4j:
  circuitbreaker:
    instances:
      productServiceCircuit:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        registerHealthIndicator: true
        recordExceptions:
          - org.springframework.web.client.RestClientException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
  timelimiter:
    instances:
      productServiceCircuit:
        timeoutDuration: 3s

logging:
  pattern:
    console: '{"timestamp":"%d{yyyy-MM-dd''T''HH:mm:ss.SSSXXX}","level":"%p","thread":"%t","logger":"%c{1}","message":"%m","application":"${spring.application.name:-}","traceId":"%X{traceId:-}","spanId":"%X{spanId:-}","exception":"%ex"}%n'
  level:
    io.github.resilience4j: DEBUG