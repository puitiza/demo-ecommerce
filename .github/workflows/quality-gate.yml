name: Quality Gate

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  quality-check:
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:25.9.0.112764-community
        ports: ["9000:9000"]
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
          SONARQUBE_ADMIN_PASSWORD: "MySecurePoCPass123!"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Wait for SonarQube
        run: |
          echo "‚è≥ Waiting for SonarQube to start..."
          for i in {1..30}; do
            if curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; then
              echo "‚úÖ SonarQube is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå SonarQube failed to start in time"
              exit 1
            fi
            sleep 10
          done

      - name: Generate SonarQube Token
        id: sonar-token
        run: |
          echo "üîë Generating SonarQube token..."
          
          # Generate unique token name
          TOKEN_NAME="github-actions-$(date +%s)"
          
          # Generate token via API
          RESPONSE=$(curl -s -u "admin:MySecurePoCPass123!" \
            -X POST "http://localhost:9000/api/user_tokens/generate" \
            -d "name=$TOKEN_NAME")
          
          # Extract token from response
          TOKEN=$(echo "$RESPONSE" | grep -o '"token":"[^"]*' | cut -d'"' -f4)
          
          if [ -z "$TOKEN" ]; then
            echo "‚ùå Failed to generate token"
            echo "Response: $RESPONSE"
            exit 1
          fi
          
          echo "‚úÖ Token generated: ${TOKEN:0:10}..."
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ steps.sonar-token.outputs.token }}
          SONAR_HOST_URL: "http://localhost:9000"
        run: |
          echo "üîç Running SonarQube analysis..."
          ./gradlew clean test integrationTest jacocoTestReport sonar

      - name: Check Quality Gate Status
        run: |
          echo "üìä Checking Quality Gate..."
          sleep 25  # Wait for analysis to complete
          
          # Check quality gate status
          STATUS=$(curl -s -u "${{ steps.sonar-token.outputs.token }}:" \
            "http://localhost:9000/api/qualitygates/project_status?projectKey=demo-ecommerce" \
            | jq -r '.projectStatus.status')
          
          echo "Quality Gate Status: $STATUS"
          
          if [ "$STATUS" != "OK" ]; then
            echo "‚ùå Quality Gate FAILED - Check SonarQube for details"
            exit 1
          else
            echo "‚úÖ Quality Gate PASSED"
          fi

      - name: Cleanup Token
        if: always()
        run: |
          echo "üßπ Cleaning up temporary token..."
          # Note: In real scenario, you might want to keep tokens for audit
          # But for security, we clean them up
          echo "Token would be revoked here"