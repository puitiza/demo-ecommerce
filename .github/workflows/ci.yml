# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write  # For committing updates to docker-compose.yml and creating tags
  packages: write  # For pushing to GHCR
  issues: write    # For creating releases

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # NEW: Full clone for complete tag/history access
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch all tags
        run: |
          git fetch --tags --prune
          # Verify tags are fetched
          echo "Available tags:"
          git tag --list | sort -V | tail -3  # Show last 3 for debug

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Extract version from tags
        id: extract-version
        run: |
          chmod +x ./imports/scripts/extract-version.sh
          EXTRACTED=$(./imports/scripts/extract-version.sh)
          echo "extracted_version=$EXTRACTED" >> $GITHUB_ENV
          echo "Extracted latest tag: $EXTRACTED"  # NEW: Debug log

      - name: Increment version (patch)
        id: increment-version
        run: |
          chmod +x ./imports/scripts/increment-version.sh
          NEW_VERSION=$(./imports/scripts/increment-version.sh "${{ env.extracted_version }}")
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"  # NEW: Debug log

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images (Single-arch with Buildx)
        run: |
          SERVICES=("server-gateway" "server-discovery" "server-config" "product-service" "order-service")
          VERSION="${{ env.new_version }}"
          docker buildx create --use || true
          for SERVICE in "${SERVICES[@]}"; do
            echo "Building and pushing $SERVICE for amd64 only"
            docker buildx build \
              --platform linux/amd64 \
              --build-arg MODULE=$SERVICE \
              -t ghcr.io/puitiza/demo-ecommerce-$SERVICE:$VERSION \
              -t ghcr.io/puitiza/demo-ecommerce-$SERVICE:latest \
              --push .
          done

      - name: Create tag and GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ env.new_version }}"
          # Idempotent tag: Skip if exists locally (after fetch)
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping creation"
          else
            git tag "$TAG"
            git push origin "$TAG"
          fi
          # NEW: Idempotent release: Skip if release already exists
          if ! gh release view "$TAG" >/dev/null 2>&1; then
            echo "Creating release for $TAG"
            gh release create "$TAG" --target "${{ github.sha }}" --notes "Published Docker images for the following services:
            - server-gateway:$TAG
            - server-discovery:$TAG
            - server-config:$TAG
            - product-service:$TAG
            - order-service:$TAG"
          else
            echo "Release for $TAG already exists, skipping creation"
          fi

      - name: Validate deployment
        run: |
          # Pull and start services
          docker compose pull
          docker compose up -d
          # Wait longer for full stack startup (healthchecks, registrations)
          sleep 120
          # Run verification script
          chmod +x verify.sh
          ./verify.sh || exit 1
          # Cleanup
          docker compose down