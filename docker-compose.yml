services:
  server-gateway:
    container_name: server-gateway
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: server-gateway
    ports:
      - "8090:8090"
    depends_on:
      order-service:
        condition: service_healthy
      server-discovery:
        condition: service_healthy
      server-config:
        condition: service_healthy
      otel-collector:
        condition: service_started
      keycloak:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      MANAGEMENT_OTLP_TRACING_ENDPOINT: http://otel-collector:4318/v1/traces
      DISCOVERY_ENDPOINT: http://server-discovery:8761/eureka
      KEYCLOAK_ENDPOINT: http://keycloak:8080/realms
      CONFIG_ENDPOINT: http://server-config:8885
      REDIS_ENDPOINT: redis://redis:6379
    networks:
      - microservices-net
    restart: unless-stopped

  server-discovery:
    container_name: server-discovery
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: server-discovery
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-net
    restart: unless-stopped

  server-config:
    container_name: server-config
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: server-config
    ports:
      - "8885:8885"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8885/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-net
    restart: unless-stopped

  order-service:
    container_name: order-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: order-service
    ports:
      - "8082:8082"
    depends_on:
      product-service:
        condition: service_healthy
      server-discovery:
        condition: service_healthy
      server-config:
        condition: service_healthy
      otel-collector:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      MANAGEMENT_OTLP_TRACING_ENDPOINT: http://otel-collector:4318/v1/traces
      DISCOVERY_ENDPOINT: http://server-discovery:8761/eureka
      KEYCLOAK_ENDPOINT: http://keycloak:8080/realms
      CONFIG_ENDPOINT: http://server-config:8885
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-net
    restart: unless-stopped

  product-service:
    container_name: product-service
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: product-service
    ports:
      - "8081:8081"
    depends_on:
      server-discovery:
        condition: service_healthy
      server-config:
        condition: service_healthy
      otel-collector:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      MANAGEMENT_OTLP_TRACING_ENDPOINT: http://otel-collector:4318/v1/traces
      DISCOVERY_ENDPOINT: http://server-discovery:8761/eureka
      KEYCLOAK_ENDPOINT: http://keycloak:8080/realms
      CONFIG_ENDPOINT: http://server-config:8885
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-net
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.73.0
    container_name: jaeger
    ports:
      - "16686:16686"   # UI Jaeger
      - "14268:14268"   # HTTP receiver (para OTEL Collector)
      - "14250:14250"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - microservices-net
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:26.3.3
    container_name: keycloak
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
    ports:
      - "8080:8080"
    volumes:
      - ./imports/keycloak/master-realm.json:/opt/keycloak/data/import/master-realm.json
      - ./imports/keycloak/demo-ecommerce-realm.json:/opt/keycloak/data/import/demo-ecommerce-realm.json
    command: start-dev --import-realm
    healthcheck:
      test: [ 'CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { java.net.URI uri = java.net.URI.create(args[0]); System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)uri.toURL().openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live' ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - microservices-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8.0
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./imports/observability/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./imports/observability/grafana/provisioning/datasources/grafana-datasource.yml:/etc/grafana/provisioning/datasources/grafana-datasource.yml
      - ./imports/observability/grafana/provisioning/dashboards/grafana-dashboard.yml:/etc/grafana/provisioning/dashboards/grafana-dashboard.yml
      - ./imports/observability/grafana/dashboards:/etc/grafana/dashboards
      - ./imports/observability/grafana/entrypoint.sh:/entrypoint.sh
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    entrypoint: [ "/bin/sh", "/entrypoint.sh" ]
    networks:
      - microservices-net
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped

  loki:
    image: grafana/loki:3.2.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config/config.yml
    volumes:
      - ./imports/observability/loki-config.yml:/etc/loki/config/config.yml
    networks:
      - microservices-net
    restart: unless-stopped

  promtail-agent:
    image: grafana/promtail:3.2.0
    container_name: promtail-agent
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./imports/observability/promtail-config.yml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro              # Mount the Docker socket
      - /var/lib/docker/containers:/var/lib/docker/containers:ro  # Access to container logs
    networks:
      - microservices-net
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.135.0
    container_name: otel-collector
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./imports/observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC (For traces/metric/records)
      - "4318:4318"   # OTLP HTTP (For Jaeger)
    depends_on:
      - jaeger
      - loki
    networks:
      - microservices-net
    restart: unless-stopped

networks:
  microservices-net:
    driver: bridge