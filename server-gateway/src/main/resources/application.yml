server:
  port: 8090

spring:
  application:
    name: gateway-service
  profiles:
    active: dev
  config:
    import: optional:configserver:${CONFIG_ENDPOINT:http://localhost:8885}
  data:
    redis:
      url: ${REDIS_ENDPOINT:redis://localhost:6379}
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ENDPOINT:http://localhost:8080/realms}/demo-ecommerce
  cloud:
    gateway:
      server:
        webflux:
          routes:
            - id: order-service
              uri: lb://order-service
              predicates:
                - Path=/order/**
              filters:
                - name: RewritePath
                  args:
                    regexp: ^/order/docs/(?<segment>.*)
                    replacement: /docs/${segment}
                - name: RequestRateLimiter
                  args:
                    key-resolver: "#{@userKeyResolver}"
                    redis-rate-limiter.replenishRate: 10
                    redis-rate-limiter.burstCapacity: 5
                    redis-rate-limiter.requestedTokens: 1
            - id: product-service
              uri: lb://product-service
              predicates:
                - Path=/product/**
              filters:
                - name: RewritePath
                  args:
                    regexp: ^/product/docs/(?<segment>.*)
                    replacement: /docs/${segment}

logging:
  level:
    org.springframework.security: INFO
    org.springframework.security.web.server.authentication.AuthenticationWebFilter: DEBUG
    org.springframework.data.redis: DEBUG